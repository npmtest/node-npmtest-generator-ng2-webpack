{"/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/test.js":"/* istanbul instrument in package npmtest_generator_ng2_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/lib.npmtest_generator_ng2_webpack.js":"/* istanbul instrument in package npmtest_generator_ng2_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_ng2_webpack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_ng2_webpack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-ng2-webpack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_ng2_webpack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_ng2_webpack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_ng2_webpack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_ng2_webpack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_ng2_webpack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_ng2_webpack.__dirname + '/lib.npmtest_generator_ng2_webpack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/app/index.js":"'use strict';\nvar generators = require('yeoman-generator');\nvar optionOrPrompt = require('yeoman-option-or-prompt');\nvar chalk = require('chalk');\nvar yosay = require('yosay');\nvar path = require('path');\nvar mixinLodash = require('../../libs/mixinLodash');\nvar mixinBeautify = require('../../libs/mixinBeautify');\nvar mixinFile = require('../../libs/mixinFile');\nvar mixinNotifier = require('../../libs/mixinNotifier');\nvar mixinInspector = require('../../libs/mixinInspector');\n\nmodule.exports = generators.Base.extend({\n\n    _optionOrPrompt: optionOrPrompt,\n\n    constructor: function() {\n        generators.Base.apply(this, arguments);\n\n        // applying mixins\n        mixinLodash.extend(this);\n        mixinBeautify.extend(this);\n        mixinFile.extend(this);\n        mixinNotifier.extend(this);\n        mixinInspector.extend(this);\n\n        // Registering file transforms\n        this.mixins.beautifyJson();\n\n        this.appname = this.appname || path.basename(process.cwd());\n        this.appname = this.mixins.dasherize(this.appname);\n\n        //******* arguments ***********\n        // To access arguments later use this.argumentName\n        this.argument('appname', {\n            desc: 'The application name',\n            type: String,\n            optional: true,\n            required: false,\n            defaults: this.appname\n        });\n\n        this.appname = this.mixins.dasherize(this.appname);\n        // ***** arguments ********\n\n        // ****** options *********\n        // To access options later use this.options.optionName\n        this.option('skip-install', {\n            desc: 'Skip the bower and node installations',\n            type: Boolean,\n            defaults: false\n        });\n\n    },\n\n    initializing: function() {\n        var done = this.async();\n        var self = this;\n        this.pkg = this.mixins.readJsonFile('../../package.json', __dirname);\n        this.mixins.notifyUpdate(this.pkg, function(message) {\n            if (message) {\n                self.log(message);\n            }\n            done();\n        });\n\n    },\n\n    prompting: function() {\n\n        // Have Yeoman greet the user.\n        this.log(yosay('Welcome to the awesome ' + chalk.yellow(this.mixins.getGeneratorShortname()) + ' generator!'));\n        this.log('Out of the box I create an Angular 2 application.\\n');\n        var done = this.async();\n        var prompts = [{\n            type: 'input',\n            name: 'name',\n            message: 'What is the name of your project?',\n            default: this.mixins.dasherize(this.appname)\n        }, {\n            type: 'input',\n            name: 'clientFolder',\n            message: 'In which folder would you like your scripts?',\n            default: 'src'\n        }];\n        this._optionOrPrompt(prompts, function(answers) {\n            this.answers = answers;\n            this.appname = this.answers.appname ? this.mixins.dasherize(this.answers.appname) : this.mixins.dasherize(this.appname);\n            // To access answers later use this.answers.someAnswer;\n            this.answers.clientFolder = this.mixins.dasherize(this.answers.clientFolder);\n            this.answers.targetname = this.mixins.dasherize(this.answers.targetname);\n            done();\n        }.bind(this));\n    },\n\n    configuring: function() {\n        this.config.set('filenameCase', this.filenameCase);\n        this.config.set('filenameSuffix', this.filenameSuffix);\n        this.config.set('appname', this.appname);\n        this.config.set('clientFolder', this.answers.clientFolder);\n        this.composeWith(this.mixins.getGeneratorShortname() + ':target', {\n            //args: this.options.target ? [this.options.target] : null,\n            options: {\n                clientFolder: this.config.get('clientFolder') // passing the client folder for first run\n            }\n        });\n    },\n\n    writing: function() {\n\n        this.mixins.createDirSync(this.destinationPath(this.answers.clientFolder));\n        //this.mixins.createDirSync('test');\n        //this.fs.write(this.destinationPath('test/.gitignore'), '');\n\n        this.fs.copy(\n            this.templatePath('json-server'),\n            this.destinationPath('json-server')\n        );\n\n        this.fs.copy(\n            this.templatePath('typings'),\n            this.destinationPath('typings')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_editorconfig'),\n            this.destinationPath('.editorconfig')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_eslintignore'),\n            this.destinationPath('.eslintignore')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_eslintrc.json'),\n            this.destinationPath('.eslintrc.json')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_gitignore'),\n            this.destinationPath('.gitignore')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_jsbeautifyrc'),\n            this.destinationPath('.jsbeautifyrc')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_npmrc'),\n            this.destinationPath('.npmrc')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_nvmrc'),\n            this.destinationPath('.nvmrc')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_package.json'),\n            this.destinationPath('package.json'), {\n                appname: this.appname,\n                clientFolder: this.answers.clientFolder\n            }\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_README.md'),\n            this.destinationPath('README.md'), {\n                appname: this.appname\n            }\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_travis.yml'),\n            this.destinationPath('.travis.yml')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('_tsconfig.json'),\n            this.destinationPath('tsconfig.json'), {\n                clientFolder: this.answers.clientFolder\n            }\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('karma.conf.js'),\n            this.destinationPath('karma.conf.js')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('karma-shim.js'),\n            this.destinationPath('karma-shim.js')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('protractor.conf.js'),\n            this.destinationPath('protractor.conf.js')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('tslint.json'),\n            this.destinationPath('tslint.json')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('typedoc.json'),\n            this.destinationPath('typedoc.json')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('typings.json'),\n            this.destinationPath('typings.json')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('webpack.config.js'),\n            this.destinationPath('webpack.config.js')\n        );\n\n        this.fs.copyTpl(\n            this.templatePath('docker-compose.yml'),\n            this.destinationPath('docker-compose.yml')\n        );\n    },\n\n    conflicts: function() {\n\n    },\n\n    install: function() {\n        this.npmInstall(null, {\n            skipInstall: this.options['skip-install']\n        });\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/libs/mixinLodash.js":"'use strict';\nvar _ = require('lodash');\nvar _s = require('underscore.string');\n/**\n * Clean & camelize a string\n * @param {String} str - The original string\n * @returns {String} - The camelized string\n */\nvar camelize = function(str) {\n    return _.camelCase(str);\n};\n\n/**\n * Clean & pascalize a string\n * @param {String} str - The original string\n * @returns {String} - The pascalized string\n */\nvar classify = function(str) {\n    return  _s.classify(str);\n};\n\n/**\n * Clean & dasherize a string\n * @param {String} str - The original string\n * @returns {String} - The dasherized string\n */\nvar dasherize = function(str) {\n    return _.kebabCase(str);\n};\n\n/**\n * Get the string back with the correct file casing as defined by filenameCase\n * @param {String} str - The original string\n * @returns {String} - A string with the correct casing (i.e. camelCase, snake-case)\n */\nvar casify = function(str) {\n    var filenameCase = this.config.get('filenameCase') || 'camel';\n    str = camelize(str);\n    if (filenameCase === 'snake') {\n        return this.dasherize(str);\n    }\n    return str;\n};\n\n/**\n * Append the component type suffix if filenameSuffix is set to true in the .yo-rc.json\n * @param {String} str - The original string\n * @param {String} suffix - The name of the component's type to append\n * @returns {String} - Either str or str with the suffix appended. (i.e. 'homeCtrl' vs 'homeCtrl.controller')\n */\nvar suffixify = function(str, suffix) {\n    var filenameSuffix = this.config.get('filenameSuffix');\n    if (filenameSuffix === true || filenameSuffix === 'true') {\n        return str + '.' + suffix;\n    }\n    return str;\n};\n\n/**\n * The exported object\n * To apply the mixin execute: this.mixins.extend(generator);\n * @type {Object}\n */\nmodule.exports = {\n    extend: function(generator) {\n        var mixins = generator.mixins = generator.mixins || {};\n        mixins.camelize = camelize.bind(generator);\n        mixins.classify = classify.bind(generator);\n        mixins.dasherize = dasherize.bind(generator);\n        mixins.casify = casify.bind(generator);\n        mixins.suffixify = suffixify.bind(generator);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/libs/mixinBeautify.js":"'use strict';\n\nvar filter = require('gulp-filter');\nvar tap = require('gulp-tap');\nvar beautify_js = require('js-beautify').js;\nvar beautify_css = require('js-beautify').css;\nvar beautify_html = require('js-beautify').html;\nvar utils = {};\nrequire('./mixinFile').extend(utils);\nvar beautifyConfig = utils.mixins.readJsonFile('../.jsbeautifyrc', __dirname);\n\n/**\n * Beautify a json stream\n * @param {Array} globs An optional array of globs\n */\nvar beautifyJson = function(globs) {\n    globs = [].concat(globs || ['**/*.json']);\n    var extensionFilter = filter(globs, {\n        restore: true\n    });\n    var config = beautifyConfig.js;\n    config.indent_size = 2;\n    config.max_preserve_newlines = 1;\n    this.registerTransformStream([\n        extensionFilter,\n        tap(function(file, t) {\n            var contents = file.contents.toString();\n            contents = beautify_js(contents, config);\n            file.contents = new Buffer(contents);\n        }),\n        //prettifyJs(config),\n        extensionFilter.restore\n    ]);\n};\n\n/**\n * Beautify a javascript stream\n * @param {Array} globs An optional array of globs\n */\nvar beautifyJs = function(globs) {\n    globs = [].concat(globs || ['**/*.js']);\n    var extensionFilter = filter(globs, {\n        restore: true\n    });\n    var config = beautifyConfig.js;\n    config.indent_size = 4;\n    config.max_preserve_newlines = 2;\n    this.registerTransformStream([\n        extensionFilter,\n        //prettifyJs(config),\n        tap(function(file, t) {\n            var contents = file.contents.toString();\n            contents = beautify_js(contents, config);\n            file.contents = new Buffer(contents);\n        }),\n        extensionFilter.restore\n    ]);\n};\n\n/**\n * Beautify a typescript stream\n * @param {Array} globs An optional array of globs\n */\nvar beautifyTs = function(globs) {\n    globs = [].concat(globs || ['**/*.ts']);\n    var extensionFilter = filter(globs, {\n        restore: true\n    });\n    var config = beautifyConfig.js;\n    config.indent_size = 4;\n    config.max_preserve_newlines = 2;\n    this.registerTransformStream([\n        extensionFilter,\n        tap(function(file, t) {\n            var contents = file.contents.toString();\n            contents = beautify_js(contents, config);\n            file.contents = new Buffer(contents);\n        }),\n        extensionFilter.restore\n    ]);\n};\n\n/**\n * Beautify an html stream\n * @param {Array} globs An optional array of globs\n */\nvar beautifyHtml = function(globs) {\n    globs = [].concat(globs || ['**/*.html']);\n    var extensionFilter = filter(globs, {\n        restore: true\n    });\n    var config = beautifyConfig.html;\n    config.max_preserve_newlines = 1;\n    this.registerTransformStream([\n        extensionFilter,\n        tap(function(file, t) {\n            var contents = file.contents.toString();\n            contents = beautify_html(contents, config);\n            file.contents = new Buffer(contents);\n        }),\n        extensionFilter.restore\n    ]);\n};\n\n/**\n * Beautify an css stream\n * @param {Array} globs An optional array of globs\n */\nvar beautifyCss = function(globs) {\n    globs = [].concat(globs || ['**/*.css', '**/*.scss', '**/*.sass']);\n    var extensionFilter = filter(globs, {\n        restore: true\n    });\n    var config = beautifyConfig.css;\n    config.max_preserve_newlines = 1;\n    this.registerTransformStream([\n        extensionFilter,\n        tap(function(file, t) {\n            var contents = file.contents.toString();\n            contents = beautify_css(contents, config);\n            file.contents = new Buffer(contents);\n        }),\n        extensionFilter.restore\n    ]);\n};\n\n/**\n * The exported object\n * To apply the mixin execute: this.mixins.extend(generator);\n * @type {Object}\n */\nmodule.exports = {\n    extend: function(generator) {\n        var mixins = generator.mixins = generator.mixins || {};\n        mixins.beautifyJson = beautifyJson.bind(generator);\n        mixins.beautifyJs = beautifyJs.bind(generator);\n        mixins.beautifyTs = beautifyTs.bind(generator);\n        mixins.beautifyHtml = beautifyHtml.bind(generator);\n        mixins.beautifyCss = beautifyCss.bind(generator);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/libs/mixinFile.js":"'use strict';\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar stripJsonComments = require('strip-json-comments');\n\n/**\n * Read a text file and return its content as a string\n * @param {String} filename The filename\n * @param {String} dirname The directory name (optional)\n * @returns {String} The file content as a string\n */\nvar readTextFile = function(filename, dirname) {\n    // when dirname is null or undefined we read from local path, otherwise we read from absolute path\n    if (dirname && !path.isAbsolute(filename)) {\n        filename = path.resolve(path.join(dirname, filename));\n    }\n    var body = fs.readFileSync(filename, 'utf-8');\n    return body;\n};\n\n/**\n * Read a json file and return its content as an object\n * @param {String} filename The filename\n * @param {String} dirname The directory name (optional)\n * @returns {Object} The file content as an object\n */\nvar readJsonFile = function(filename, dirname) {\n    var body = readTextFile(filename, dirname);\n    return JSON.parse(stripJsonComments(body));\n};\n\n/**\n * Create a folder synchronously\n * @param  {String} path The path\n */\nvar createDirSync = function(path) {\n    mkdirp.sync(path);\n};\n\n/**\n * Check if a file or path exists\n * @param  {String} file - The file path\n * @returns {Boolean}     - true if exists, false otherwise\n */\nvar fileExistsSync = function(file) {\n    try {\n        fs.accessSync(file);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n\nmodule.exports = {\n    extend: function(generator) {\n        var mixins = generator.mixins = generator.mixins || {};\n        mixins.readTextFile = readTextFile.bind(generator);\n        mixins.readJsonFile = readJsonFile.bind(generator);\n        mixins.createDirSync = createDirSync;\n        mixins.fileExistsSync = fileExistsSync;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/libs/mixinNotifier.js":"'use strict';\nvar updateNotifier = require('update-notifier');\nvar chalk = require('chalk');\nvar stringLength = require('string-length');\nvar repeating = require('repeating');\n\n/**\n * Generates the message to display when a new update is available\n * @param  {Object} update - The update object coming from update-notifier\n * @returns {String}        - The message to display\n */\nvar makeMessage = function(update) {\n    var line1 = ' Update available: ' + chalk.green.bold(update.latest) +\n        chalk.dim(' (current: ' + update.current + ')') + ' ';\n    var line2 = ' Run ' + chalk.blue('npm install -g ' + update.name) +\n        ' to update. ';\n    var contentWidth = Math.max(stringLength(line1), stringLength(line2));\n    var line1rest = contentWidth - stringLength(line1);\n    var line2rest = contentWidth - stringLength(line2);\n    var top = chalk.yellow('┌' + repeating('─', contentWidth) + '┐');\n    var bottom = chalk.yellow('└' + repeating('─', contentWidth) + '┘');\n    var side = chalk.yellow('│');\n\n    var message =\n        '\\n\\n' +\n        top + '\\n' +\n        side + line1 + repeating(' ', line1rest) + side + '\\n' +\n        side + line2 + repeating(' ', line2rest) + side + '\\n' +\n        bottom + '\\n';\n    return message;\n};\n\n/**\n * Notify if the generator should be updated\n * @param  {Object} pkg - The package.json for the generator\n * @param {Function} cb - The callback function\n */\nvar notifyUpdate = function(pkg, cb) {\n    updateNotifier({\n        pkg: pkg,\n        callback: function(error, update) {\n            if (error) {\n                cb();\n                return;\n            }\n            if (update.latest !== update.current) {\n                var message = makeMessage(update);\n                cb(message);\n            } else {\n                cb();\n            }\n        }\n    });\n};\n\nmodule.exports = {\n    extend: function(generator) {\n        var mixins = generator.mixins = generator.mixins || {};\n        mixins.notifyUpdate = notifyUpdate.bind(generator);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/libs/mixinInspector.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs');\nvar _ = require('lodash');\nvar utils = {};\nrequire('./mixinFile').extend(utils);\n\n/**\n * Returns this generator full name so we can change it in package.json without altering the code\n * @returns {String} The generator full name\n */\nvar getGeneratorFullname = function() {\n    var pkg = require('../package.json');\n    return pkg.name;\n};\n\n/**\n * Returns this generator short name (without generator) so we can change it in package.json without altering the code\n * @returns {String} The generator short name\n */\nvar getGeneratorShortname = function() {\n    var pkg = require('../package.json');\n    return pkg.name.replace('generator-', '');\n};\n\n/**\n * Return the list of client targets\n * @param {String} clientFolder - The client folder\n * @returns {String[]} - An array of client targets\n */\nvar getClientTargets = function(clientFolder) {\n    if (!clientFolder) {\n        return [];\n    }\n    var pathdir = this.destinationPath(path.join(clientFolder, 'app'));\n    if (!fs.existsSync(pathdir)) {\n        return [];\n    }\n    //var re = /^(index-.*\\.html|index\\.html)$/;\n\n    var result = fs.readdirSync(pathdir)\n        .filter(function(file) {\n            return fs.statSync(path.join(pathdir, file)).isDirectory() === true && utils.mixins.fileExistsSync(path.join(pathdir, file, 'index.html'));\n        })\n        .map(function(name) {\n            var appname = path.basename(name, '.html');\n            appname = appname === 'index' ? 'app' : _(appname.split('-')).last();\n            return appname;\n        });\n    return result;\n};\n\n/**\n * Return the list of angularjs client modules\n * @param {String} clientFolder - The client folder\n * @param {String} moduleName - the module folder\n * @returns {String[]} - An array of client modules\n */\nvar getClientModules = function(clientFolder, moduleName) {\n    var results = [];\n    var charCountToIgnore = 'src/app/components/'.length;\n\n    moduleName = moduleName || 'app';\n\n    if (!clientFolder) {\n        return [];\n    }\n    var pathString = path.join(clientFolder, moduleName, 'components');\n    var pathdir = this.destinationPath(pathString);\n\n    if (!fs.existsSync(pathdir)) {\n        return [];\n    }\n\n    var result = fs.readdirSync(pathdir)\n        .filter(function(file) {\n            return fs.statSync(path.join(pathString, file)).isDirectory() === true;\n        });\n\n    result.forEach(function(module) {\n        var includeSeparator = pathString.slice(charCountToIgnore).length > 0;\n        results.push(path.join(pathString.slice(charCountToIgnore), includeSeparator ? '/' : '' , module));\n        results = results.concat(getClientModules.apply(this, [pathString, module]));\n    }, this);\n\n    if (moduleName === 'app') {\n        results.push('app');\n    }\n\n    return results;\n};\n\n/**\n * Converts the target name application to suffix\n * @param {String} targetname - The name of the target application\n *\n * @returns {String} - The suffix name of the target application\n */\nvar targetnameToSuffix = function(targetname) {\n    return targetname === 'app' ? '' : 'app/components/' + targetname;\n};\n\n/**\n * The exported object\n * To apply the mixin execute: this.mixins.extend(generator);\n * @type {Object}\n */\nmodule.exports = {\n    extend: function(generator) {\n        var mixins = generator.mixins = generator.mixins || {};\n        mixins.getGeneratorFullname = getGeneratorFullname.bind(generator);\n        mixins.getGeneratorShortname = getGeneratorShortname.bind(generator);\n        mixins.getClientTargets = getClientTargets.bind(generator);\n        mixins.targetnameToSuffix = targetnameToSuffix.bind(generator);\n        mixins.getClientModules = getClientModules.bind(generator);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/componentGenerator.js":"'use strict';\nvar generators = require('yeoman-generator');\nvar path = require('path');\nvar mixinInspector = require('../libs/mixinInspector');\nvar mixinFile = require('../libs/mixinFile');\nvar mixinBeautify = require('../libs/mixinBeautify');\nvar mixinLodash = require('../libs/mixinLodash');\nmodule.exports = generators.Base.extend({\n    constructor: function() {\n        generators.Base.apply(this, arguments);\n        if (!this.basetype) {\n            throw 'basetype is undefined';\n        }\n        if (!this.basefolder) {\n            throw 'basefolder is undefined';\n        }\n\n        // applying mixins\n        mixinInspector.extend(this);\n        mixinFile.extend(this);\n        mixinBeautify.extend(this);\n        mixinLodash.extend(this);\n\n        // Registering file transforms\n        this.mixins.beautifyJson();\n        this.mixins.beautifyHtml();\n        this.mixins.beautifyTs();\n        this.mixins.beautifyCss();\n\n        //******* arguments ***********\n        // To access arguments later use this.argumentName\n        this.argument('modulename', {\n            desc: 'The module name',\n            type: String,\n            optional: true,\n            required: false\n        });\n        this.modulename = this.mixins.camelize(this.modulename);\n\n        this.argument(this.basetype + 'name', {\n            desc: 'The ' + this.basetype + ' name',\n            type: String,\n            optional: true,\n            required: false\n        });\n        this[this.basetype + 'name'] = this.mixins.camelize(this[this.basetype + 'name']);\n        // ***** arguments ********\n\n    },\n\n    initializing: function() {\n        this.configOptions = this.config.getAll();\n        this.configOptions.clientTargets = this.mixins.getClientTargets(this.configOptions.clientFolder);\n        this.configOptions.clientModules = this.mixins.getClientModules(this.configOptions.clientFolder);\n    },\n\n    prompting: function(done, extraPrompts) {\n        done = done || this.async();\n        var self = this;\n        extraPrompts = extraPrompts || [];\n        var prompts = [{\n            type: 'list',\n            name: 'modulename',\n            choices: this.configOptions.clientModules,\n            message: 'In which feature would you like to store your ' + self.basetype + '?',\n            when: function() {\n                return !self.modulename || self.modulename.length <= 0;\n            }\n        }, {\n            type: 'input',\n            name: self.basetype + 'name',\n            message: 'How would you like to name your ' + self.basetype + '?',\n            when: function() {\n                return !self[self.basetype + 'name'] || self[self.basetype + 'name'].length <= 0;\n            }\n        }].concat(extraPrompts);\n\n        this.prompt(prompts, function(answers) {\n            this.answers = answers;\n            // To access props later use this.answers.someOption;\n            done();\n        }.bind(this));\n\n    },\n\n    configuring: function() {\n        this.modulename = this.modulename || this.answers.modulename;\n        this[this.basetype + 'name'] = this.mixins.camelize(this[this.basetype + 'name'] || this.answers[this.basetype + 'name']);\n        this[this.basetype + 'nameFile'] = this.isDasherize ? this.mixins.dasherize(this[this.basetype + 'name']) : this[this.basetype + 'name'];\n        this[this.basetype + 'nameClass'] = this.mixins.classify(this[this.basetype + 'name']);\n    },\n\n    writing: function() {\n        var modulename = this.modulename === 'app' ? this.modulename : path.join('app', 'components', this.modulename);\n        var destinationPath = path.join(this.configOptions.clientFolder, modulename, this.basefolder);\n        if (this.hasOwnFolder) {\n            destinationPath = path.join(destinationPath, this[this.basetype + 'nameFile']);\n        }\n        this.mixins.createDirSync(destinationPath);\n        return destinationPath;\n    }\n\n});\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/validators.js":"'use strict';\nvar chalk = require('chalk');\nvar _ = require('lodash');\nvar mixinLodash = require('../libs/mixinLodash');\nvar utils = {};\nmixinLodash.extend(utils);\n\nvar validateTarget = function(clientTargets) {\n\n    return function(value) {\n\n        if (_.isEmpty(value) || value[0] === '/' || value[0] === '\\\\') {\n            return chalk.red('Please enter a non empty name');\n        }\n        value = utils.mixins.dasherize(value);\n        if (_.contains(clientTargets, value)) {\n            return chalk.red('The target name ') + chalk.yellow(value) + chalk.red(' already exists');\n        }\n        return true;\n    };\n};\n\nmodule.exports = {\n    validateTarget: validateTarget\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/component/index.js":"'use strict';\nvar path = require('path');\nvar ComponentGenerator = require('../componentGenerator');\nvar Generator = module.exports = ComponentGenerator.extend({\n\n    constructor: function() {\n        this.basetype = 'component'; // this will create a property this.componentname\n        this.basefolder = 'components'; // this is the folder for the components\n        this.hasOwnFolder = true; // to specify if the component files should be in a subfolder\n        this.isDasherize = true; // to specify that the file name should be dasherized\n        ComponentGenerator.apply(this, arguments);\n\n        this.option('targettype', {\n            desc: 'The type of target',\n            type: String,\n            hide: false\n        });\n    },\n\n    initializing: function() {\n        Generator.__super__.initializing.apply(this, arguments);\n        this.mixins.beautifyTs();\n    },\n\n    prompting: function() {\n        var done = this.async();\n        var self = this;\n        var extraPrompts = [{\n            type: 'list',\n            name: 'targettype',\n            default: 'web',\n            when: function() {\n                return !self.options.targettype || self.options.targettype.length <= 0;\n            },\n            message: 'What type of component do you want to create?',\n            choices: ['web']\n        }];\n        Generator.__super__.prompting.call(this, done, extraPrompts);\n\n    },\n\n    configuring: function() {\n        Generator.__super__.configuring.apply(this, arguments);\n        this.targettype = this.answers.targettype || this.options.targettype;\n    },\n\n    writing: function() {\n        var destinationPath = Generator.__super__.writing.apply(this, arguments);\n        //var componentnameFile = this.componentname; //this.mixins.dasherize(this.componentname); // could be componentname\n\n        switch (this.targettype) {\n            case 'web':\n                this.fs.copyTpl(\n                    this.templatePath('_component.ts'),\n                    this.destinationPath(path.join(destinationPath, 'index.ts')), {\n                        componentnameFile: this.componentnameFile,\n                        componentname: this.componentname,\n                        componentnameClass: this.componentnameClass\n                    }\n                );\n\n                this.fs.copyTpl(\n                    this.templatePath('_component.spec.ts'),\n                    this.destinationPath(path.join(destinationPath, 'spec.ts')), {\n                        componentnameFile: this.componentnameFile,\n                        componentname: this.componentname,\n                        componentnameClass: this.componentnameClass,\n                        assertPath: path.relative(path.join(destinationPath, 'spec.ts'), path.join('src','app', 'assert')).replace(/\\\\/g,'/')\n                    }\n                );\n\n                this.fs.copyTpl(\n                    this.templatePath('_component.html'),\n                    this.destinationPath(path.join(destinationPath, 'template.html')), {\n                        componentname: this.componentname\n                    }\n                );\n                this.fs.copyTpl(\n                    this.templatePath('_component.scss'),\n                    this.destinationPath(path.join(destinationPath, 'style.scss'))\n                );\n                break;\n        }\n\n    }\n\n});\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/app/templates/karma.conf.js":"'use strict';\n\nvar webpackConfig = require('./webpack.config');\n\nmodule.exports = function (config) {\n    var _config = {\n\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: '',\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine'],\n\n        // list of files / patterns to load in the browser\n        files: [\n            {pattern: './karma-shim.js', watched: false},\n            {pattern: './src/app/**/*spec.ts', watched: true, included: false}\n        ],\n\n        // list of files to exclude\n        exclude: [],\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {\n            './karma-shim.js': ['webpack', 'sourcemap']\n        },\n\n        webpack: webpackConfig,\n\n        webpackMiddleware: {\n            // webpack-dev-middleware configuration\n            // i. e.\n            stats: 'errors-only'\n        },\n\n        coverageReporter: {\n            dir: 'coverage/',\n            reporters: [\n                {type: 'text-summary'},\n                {type: 'html'}\n            ]\n        },\n\n        webpackServer: {\n            noInfo: true // please don't spam the console when running in karma!\n        },\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['story', 'coverage'],\n\n        // web server port\n        port: 9876,\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: false,\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['PhantomJS'], // you can also use Chrome\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: true\n    };\n\n    config.set(_config);\n\n};\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/app/templates/webpack.config.js":"'use strict';\n\n// Helper: root(), and rootDir() are defined at the bottom\nvar path = require('path');\nvar webpack = require('webpack');\n\n// Webpack Plugins\nvar CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin;\nvar autoprefixer = require('autoprefixer');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar CopyWebpackPlugin = require('copy-webpack-plugin');\n\nvar DEFAULT_TARGET = 'app';\nvar target = process.env.TARGET || DEFAULT_TARGET;\n\n/**\n * Env\n * Get npm lifecycle event to identify the environment\n */\nvar ENV = process.env.npm_lifecycle_event;\n\n// Helper functions\nfunction root(args) {\n    args = Array.prototype.slice.call(arguments, 0);\n    return path.join.apply(path, [__dirname].concat(args));\n}\n\nfunction prepend(extensions, args) {\n    args = args || [];\n    if (!Array.isArray(args)) { args = [args]; }\n    return extensions.reduce(function(memo, val) {\n        return memo.concat(val, args.map(function(prefix) {\n            return prefix + val;\n        }));\n    }, ['']);\n}\n\nmodule.exports = (function makeWebpackConfig() {\n    /**\n     * Config\n     * Reference: http://webpack.github.io/docs/configuration.html\n     * This is the object where all configuration gets set\n     */\n    var config = {};\n    var isTestEnv = ENV === 'test' || ENV === 'test-watch';\n\n    /**\n     * Devtool\n     * Reference: http://webpack.github.io/docs/configuration.html#devtool\n     * Type of sourcemap to use per build type\n     */\n    if (isTestEnv) {\n        config.devtool = 'inline-source-map';\n    } else if (ENV === 'build') {\n        config.devtool = false;\n    } else {\n        config.devtool = 'cheap-module-eval-source-map';\n    }\n\n    // add debug messages\n    config.debug = ENV !== 'build' || !isTestEnv;\n\n    /**\n     * Entry\n     * Reference: http://webpack.github.io/docs/configuration.html#entry\n     */\n    config.entry = isTestEnv ? {} : {\n        'hot-server': 'webpack/hot/dev-server',\n        'vendor': ['./src/vendor.ts', 'webpack-hot-middleware/client'],\n        'app': ['./src/bootstrap.ts', 'webpack-hot-middleware/client'] // our angular app\n    };\n\n    /**\n     * Output\n     * Reference: http://webpack.github.io/docs/configuration.html#output\n     */\n    config.output = isTestEnv ? {} : {\n        path: root('dist'),\n        publicPath: '',\n        filename: ENV === 'build' ? 'js/[name].[hash].js' : 'js/[name].js',\n        chunkFilename: ENV === 'build' ? '[id].[hash].chunk.js' : '[id].chunk.js'\n    };\n\n    /**\n     * Resolve\n     * Reference: http://webpack.github.io/docs/configuration.html#resolve\n     */\n    config.resolve = {\n        cache: !isTestEnv,\n        root: root(),\n        // only discover files that have those extensions\n        extensions: prepend(['.ts', '.tsx','.js','.json','.css', '.scss', '.html'], '.async'), // ensure .async.ts etc also works\n        alias: {\n            'app': 'src/app',\n            'common': 'src/common'\n        }\n    };\n\n    /**\n     * Loaders\n     * Reference: http://webpack.github.io/docs/configuration.html#module-loaders\n     * List: http://webpack.github.io/docs/list-of-loaders.html\n     * This handles most of the magic responsible for converting modules\n     */\n    config.module = {\n        preLoaders: isTestEnv ? [] : [{test: /\\.ts$/, loader: 'tslint'}],\n        loaders: [\n\n            // Support Angular 2 async routes via .async.ts\n            {\n                test: /\\.async\\.ts$/,\n                loaders: ['es6-promise-loader', 'ts-loader'],\n                exclude: [!isTestEnv ? /\\.(spec|e2e)\\.ts$/ : /\\.async\\.ts$/, /\\.(spec|e2e)\\.ts$/]\n            },\n\n            // Support for .ts files.\n            {\n                test: /\\.tsx?$/,\n                loader: 'ts',\n                query: {\n                    'ignoreDiagnostics': [\n                        2300, // 2300 -> Duplicate identifier\n                        2304, // 2304 -> Cannot find name '__decorate'\n                        2306, // 2300 -> Not a Module\n                        2339, // 2339 -> Property 'decorate' does not exist on type 'typeof Reflect'\n                        2347, // 2347 -> Untyped function calls may not accept type arguments\n                        2364, // 2364 -> Invalid left-hand side of assignment expression\n                        2374, // 2374 -> Duplicate number index signature\n                        2375, // 2375 -> Duplicate string index signature\n                        2403, // 2403 -> Subsequent variable declarations\n                        2502  // 2502 -> Referenced directly or indirectly\n                    ]\n                },\n                exclude: [isTestEnv ? /\\.(e2e)\\.ts$/ : /\\.(spec|e2e)\\.ts$/, /node_modules\\/(?!(ng2-.+))/]\n            },\n\n            // copy those assets to output\n            {test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/, loader: 'file?name=[path][name].[ext]?[hash]'},\n\n            // Support for *.json files.\n            {test: /\\.json$/, loader: 'json'},\n\n            // Support for CSS as raw text\n            // use 'null' loader in test mode (https://github.com/webpack/null-loader)\n            // all css in src/style will be bundled in an external css file\n            {\n                test: /\\.css$/,\n                exclude: root('src', 'app'),\n                loader: isTestEnv ? 'null' : ExtractTextPlugin.extract('style', 'css?sourceMap!postcss')\n            },\n            // all css required in src/app files will be merged in js files\n            {test: /\\.css$/, include: root('src', 'app'), loader: 'raw!postcss'},\n\n            // support for .scss files\n            // use 'null' loader in test mode (https://github.com/webpack/null-loader)\n            // all css in src/style will be bundled in an external css file\n            {\n                test: /\\.scss$/,\n                exclude: root('src', 'app'),\n                loader: isTestEnv ? 'null' : ExtractTextPlugin.extract('style', 'css?sourceMap!postcss!sass')\n            },\n            // all css required in src/app files will be merged in js files\n            {test: /\\.scss$/, exclude: root('src', 'style'), loader: 'raw!postcss!sass'},\n\n            // support for .html as raw text\n            // suggest changing the loader to something that adds a hash to images\n            {test: /\\.html$/, loader: 'raw'}\n        ],\n        postLoaders: [],\n        noParse: [/.+zone\\.js\\/dist\\/.+/, /.+angular2\\/bundles\\/.+/, /angular2-polyfills\\.js/]\n    };\n\n    if (isTestEnv) {\n        // instrument only testing sources with Istanbul, covers js compiled files for now :-/\n        config.module.postLoaders.push({\n            test: /\\.(js|ts)$/,\n            include: path.resolve('src'),\n            loader: 'istanbul-instrumenter-loader',\n            exclude: [/\\.?spec\\.ts$/, /\\.e2e\\.ts$/, /node_modules/]\n        });\n    }\n\n    /**\n     * Plugins\n     * Reference: http://webpack.github.io/docs/configuration.html#plugins\n     * List: http://webpack.github.io/docs/list-of-plugins.html\n     */\n    config.plugins = [\n        // Define env variables to help with builds\n        // Reference: https://webpack.github.io/docs/list-of-plugins.html#defineplugin\n        new webpack.DefinePlugin({\n            // Environment helpers\n            'process.env': {\n                ENV: JSON.stringify(ENV),\n                NODE_ENV: JSON.stringify(ENV === 'build' ? 'production' : 'development')\n            }\n        }),\n\n        new HtmlWebpackPlugin({\n            template: './src/public/index.html',\n            inject: 'body',\n            title: 'App - ' + target\n        })\n    ];\n\n    if (!isTestEnv) {\n        config.plugins.push(\n            // Generate common chunks if necessary\n            // Reference: https://webpack.github.io/docs/code-splitting.html\n            // Reference: https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\n            new CommonsChunkPlugin({\n                name: 'vendor',\n                filename: ENV === 'build' ? 'js/[name].[hash].js' : 'js/[name].js',\n                minChunks: Infinity\n            }),\n            new CommonsChunkPlugin({\n                name: 'common',\n                filename: ENV === 'build' ? 'js/[name].[hash].js' : 'js/[name].js',\n                minChunks: 2,\n                chunks: ['app', 'vendor']\n            }),\n\n            // Inject script and link tags into html files\n            // Reference: https://github.com/ampedandwired/html-webpack-plugin\n\n            new HtmlWebpackPlugin({\n                template: './src/public/index.html',\n                inject: 'body',\n                title: 'App - ' + target,\n                chunksSortMode: function compare(a, b) {\n                    // common always first\n                    if (a.names[0] === 'common') {\n                        return -1;\n                    }\n                    // app always last\n                    if (a.names[0] === 'app') {\n                        return 1;\n                    }\n                    // vendor before app\n                    if (a.names[0] === 'vendor' && b.names[0] === 'app') {\n                        return -1;\n                    } else {\n                        return 1;\n                    }\n                    // a must be equal to b\n                    /* eslint-disable no-unreachable */\n                    return 0;\n                    /* eslint-disable no-unreachable */\n                }\n            }),\n\n            // Extract css files\n            // Reference: https://github.com/webpack/extract-text-webpack-plugin\n            // Disabled when in test mode or not in build mode\n            new ExtractTextPlugin('css/[name].[hash].css', {disable: ENV !== 'build'})\n        );\n    }\n\n    // Add build specific plugins\n    if (ENV === 'build') {\n        config.plugins.push(\n            // Reference: http://webpack.github.io/docs/list-of-plugins.html#noerrorsplugin\n            // Only emit files when there are no errors\n            new webpack.NoErrorsPlugin(),\n\n            // Reference: http://webpack.github.io/docs/list-of-plugins.html#dedupeplugin\n            // Dedupe modules in the output\n            new webpack.optimize.DedupePlugin(),\n\n            // Reference: http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\n            // Minify all javascript, switch loaders to minimizing mode\n            new webpack.optimize.UglifyJsPlugin({\n                // to debug prod builds uncomment //debug lines and comment //prod lines\n\n                // beautify: true,//debug\n                // mangle: false,//debug\n                // dead_code: false,//debug\n                // unused: false,//debug\n                // deadCode: false,//debug\n                // compress : { screw_ie8 : true, keep_fnames: true, drop_debugger: false, dead_code: false, unused: false, }, // debug\n                // comments: true,//debug\n\n                beautify: false,//prod\n                mangle: {\n                    screw_ie8 : true,\n                    except: ['RouterLink'] // needed for uglify RouterLink problem\n                },// prod\n                compress : { screw_ie8 : true },//prod\n                comments: false//prod\n            }),\n\n            // Copy assets from the public folder\n            // Reference: https://github.com/kevlened/copy-webpack-plugin\n            new CopyWebpackPlugin([{\n                from: root('src/public')\n            }])\n        );\n    }\n\n    /**\n     * PostCSS\n     * Reference: https://github.com/postcss/autoprefixer-core\n     * Add vendor prefixes to your css\n     */\n    config.postcss = [\n        autoprefixer({\n            browsers: ['last 2 version']\n        })\n    ];\n\n    /**\n     * Sass\n     * Reference: https://github.com/jtangelder/sass-loader\n     * Transforms .scss files to .css\n     */\n    config.sassLoader = {\n        //includePaths: [path.resolve(__dirname, \"node_modules/foundation-sites/scss\")]\n    };\n\n    /**\n     * Apply the tslint loader as pre/postLoader\n     * Reference: https://github.com/wbuchwalter/tslint-loader\n     */\n    config.tslint = {\n        emitErrors: false,\n        failOnHint: false\n    };\n\n    /**\n     * Dev server configuration\n     * Reference: http://webpack.github.io/docs/configuration.html#devserver\n     * Reference: http://webpack.github.io/docs/webpack-dev-server.html\n     */\n    config.devServer = {\n        contentBase: './src/public',\n        historyApiFallback: true,\n        stats: 'minimal' // none (or false), errors-only, minimal, normal (or true) and verbose\n    };\n\n    return config;\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/app/templates/karma-shim.js":"'use strict';\n\nError.stackTraceLimit = Infinity;\nrequire('es6-shim');\nrequire('reflect-metadata');\nrequire('zone.js/dist/zone');\n\nrequire('@angular/core/testing');\n\n/*\n Ok, this is kinda crazy. We can use the the context method on\n require that webpack created in order to tell webpack\n what files we actually want to require or import.\n Below, context will be an function/object with file names as keys.\n using that regex we are saying look in client/app and find\n any file that ends with spec.js and get its path. By passing in true\n we say do this recursively\n */\nvar appContext = require.context('./src', true, /root\\.?spec\\.ts/);\n\n// get all the files, for each file, call the context function\n// that will require the file and load it up here. Context will\n// loop and require those spec files here\nappContext.keys().forEach(appContext);\n\n// Select BrowserDomAdapter.\n// see https://github.com/AngularClass/angular2-webpack-starter/issues/124\n// Somewhere in the test setup\nvar testing = require('@angular/core/testing');\nvar browser = require('@angular/platform-browser-dynamic/testing');\n\ntesting.setBaseTestProviders(\n    browser.TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n    browser.TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS\n);\n","/home/travis/build/npmtest/node-npmtest-generator-ng2-webpack/node_modules/generator-ng2-webpack/generators/app/templates/protractor.conf.js":"'use strict';\n\nexports.config = {\n    baseUrl: 'http://localhost:9000/',\n\n    specs: [\n        'src/**/*e2e.js'\n    ],\n    exclude: [],\n\n    framework: 'jasmine2',\n\n    allScriptsTimeout: 110000,\n\n    jasmineNodeOpts: {\n        showTiming: true,\n        showColors: true,\n        isVerbose: false,\n        includeStackTrace: false,\n        defaultTimeoutInterval: 400000\n    },\n    directConnect: true,\n\n    capabilities: {\n        'browserName': 'chrome'\n    },\n\n    onPrepare: function () {\n        var SpecReporter = require('jasmine-spec-reporter');\n        // add jasmine spec reporter\n        jasmine.getEnv().addReporter(new SpecReporter({displayStacktrace: true}));\n\n        browser.ignoreSynchronization = true;\n    },\n\n    /**\n     * Angular 2 configuration\n     *\n     * useAllAngular2AppRoots: tells Protractor to wait for any angular2 apps on the page instead of just the one matching\n     * `rootEl`\n     *\n     */\n    useAllAngular2AppRoots: true\n};\n"}